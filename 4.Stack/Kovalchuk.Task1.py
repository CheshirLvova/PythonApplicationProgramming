class Stack:
    def __init__ (self):            #спочатку стек завжди порожній
        self.stack = []

    def __str__ (self):             #список елементів стеку для контролю
        return "<bottom> [" + ",".join(map(str, self.stack)) + "] <top>"

    def push(self, obj):            #запис у стек
        self.stack.append(obj)
        return self                 #для коротких записів

    def pop(self):                  #читати з вершини
        if self.stack : return self.stack.pop()
        else: return None           #якщо стек порожній
        
    def empty(self):                #перевірка, чи стек порожній
        return not self.stack

    def len(self):                  #кількість елементів у стеку
        return len(self.stack)

    def peek(self):
         return self.stack[len(self.stack)-1]

    def clear(self):                #очистити стек (якщо потрібно, той самий)
        self.stack = []


##--------------------------------Задача 1--------------------------------------
##Задано текст алгебраїчної формули в лінійній формі запису, який включає круглі
##дужки. Вважати, що текст складений коректно, тобто, до кожної відкриваючої дужки є
##закриваюча і навпаки.
##Надрукувати попарно позиції відповідних відкриваючих і закриваючих дужок в
##довільному порядку розташування пар дужок.
##Приклад вхідних даних в фільтрованому вигляді – перший рядок:
##. . . ( . . . . . ( . . . . . ) . . . . . . ( . . . . ) . . . . . ( ( . . . . . ( . . . . ) ) . . . . ) . . . . ) . . .
##      3           6           10            15       19          21 22          27       29 30       33        36
##Додаткові задачі.
##1.1. Надрукувати позиції пар дужок в порядку зростання номерів позицій відкриваючих дужок.
##1.2. Надрукувати позиції пар дужок в порядку зростання номерів позицій закриваючих дужок.


        

def pretty_print(list):             #виведення результатів для користувача
    #завдання 1.2
    print("Позиції пар дужок в порядку зростання номерів позицій закриваючих дужок:")
    for i in range(len(list)):
        print(list[i])
    list.sort()
    #завдання 1.1
    print("Позиції пар дужок в порядку зростання номерів позицій відкриваючих дужок:")
    for i in range(len(list)):
        print(list[i])
    return ""

def pair_checker(symbolString):     #функція, що перевіряє індекси дужок, заданих у вхідному повідомленні та з'єднує їх по відповідним парам
    s = Stack()
    list_of_pairs = []              #записувати готові пари будемо у список
    index = 0
    while index < len(symbolString):
        symbol = symbolString[index]
        if symbol == "(":
            s.push(index)           #якщо відкриваюча дужка, кидаємо у стек, решта символів пропускаємо
        else:
            if symbol == ")":       #якщо закриваюча дужка, виконуємо наступні дії:
                one_string = '0'+str(s.peek()) if s.peek() < 10 else str(s.peek())   #створюємо тимчасовий рядок, в який спершу записуємо вершину стеку(відповідно індекс потрібної нам відкриваючої дужки)
                one_string += " - "             #далі. щоб надрукувати, як у завданні, додаємо символ -
                one_string += str(index)        #записуємо індекс закриваючої дужки
                list_of_pairs.append(one_string)#увесь рядок записуємо, як один елемент списку для подальшого сортування
                s.pop()                         
                
        index = index + 1

    if s.empty():
        return pretty_print(list_of_pairs)
    else:
        return "Текст введений некоректно! Будь ласка, перевірте правопис та спробуйте ще раз"

    
def main():
    #тестування 1 завдання
    print("Тест 1: \nвхідні дані: A=345+(23*343/(34-6))-(45/5+(23*(56845-4334))) \nРезультат:")
    print(pair_checker('(A=345+(23*343/(34-6))-(45/5+(23*(56845-4334))))')) #перевірка з різними символами
    print("Тест 2: \nвхідні дані: 345(.....(5656(nht)...)()yui)8h87 \nРезультат:")
    print(pair_checker('345(.....(5656(nht)...)()yui)8h87')) #перевірка з різними символами    
    print("Тест 3: \nвхідні дані: (() \nРезультат:")
    print(pair_checker('(()'))                               #перевірка некоректно введеного тексту (з різноюю кількістю відкриваючих та закриваючих дужок)
main()
